<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\outfile\Remix.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\outfile\Remix.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Mon Mar 27 18:00:51 2017
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TEST_TaskSwitchPrint &rArr; TEST_PrintCpuUtilize &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[90]">REMIX_CalcPrioTemp</a>
 <LI><a href="#[8]">REMIX_PendSvContextSwitch</a>
 <LI><a href="#[66]">REMIX_SwitchToTask</a>
 <LI><a href="#[8f]">REMIX_TaskOccurSwi</a>
 <LI><a href="#[8d]">REMIX_GetXpsr</a>
 <LI><a href="#[92]">REMIX_SetBasepri</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">REMIX_BeforeRootTask</a> from remix_core.o(.text) referenced from remix_core.o(.text)
 <LI><a href="#[63]">REMIX_IdleTask</a> from remix_core.o(.text) referenced from remix_core.o(.text)
 <LI><a href="#[8]">REMIX_PendSvContextSwitch</a> from remix_core_a.o(REMIX_CORE) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">REMIX_TaskSched</a> from remix_core.o(.text) referenced from remix_core_a.o(REMIX_CORE)
 <LI><a href="#[47]">REMIX_TaskSelfDelete</a> from remix_task.o(.text) referenced from remix_cpu.o(.text)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">TEST_SerialPrintTask</a> from test.o(.text) referenced from main.o(.text)
 <LI><a href="#[48]">TEST_TaskCreatePrint</a> from test.o(.text) referenced from device.o(.text)
 <LI><a href="#[4a]">TEST_TaskDeletePrint</a> from test.o(.text) referenced from device.o(.text)
 <LI><a href="#[49]">TEST_TaskSwitchPrint</a> from test.o(.text) referenced from device.o(.text)
 <LI><a href="#[4b]">TEST_TestTask1</a> from test.o(.text) referenced from main.o(.text)
 <LI><a href="#[4c]">TEST_TestTask2</a> from test.o(.text) referenced from main.o(.text)
 <LI><a href="#[4d]">TEST_TestTask3</a> from test.o(.text) referenced from main.o(.text)
 <LI><a href="#[4e]">TEST_TestTask4</a> from test.o(.text) referenced from main.o(.text)
 <LI><a href="#[4f]">TEST_TestTask5</a> from test.o(.text) referenced from main.o(.text)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[54]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ef]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[63]"></a>REMIX_IdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> remix_core.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>REMIX_SetUser</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_BeforeRootTask
</UL>

<P><STRONG><a name="[57]"></a>REMIX_BeforeRootTask</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = REMIX_BeforeRootTask
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SetUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remix_core.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>REMIX_TaskDelayTableInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REMIX_TaskDelayTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[5b]"></a>REMIX_TaskSchedTableInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSemTableInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableInit
</UL>

<P><STRONG><a name="[5c]"></a>REMIX_TaskReadyTableInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_TaskReadyTableInit &rArr; REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSchedTableInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[5d]"></a>REMIX_TaskListInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REMIX_TaskListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[5e]"></a>REMIXOS_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = REMIXOS_Init &rArr; REMIX_TaskCreate &rArr; REMIX_TaskTcbInit &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTimeSlice
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskHookInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskCreate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SystemHardwareInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskListInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SetUser
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>REMIXOS_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = REMIXOS_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SwitchToTask
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>REMIX_TaskTick</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REMIX_TaskTick
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_IntPendSvSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[69]"></a>REMIX_TaskGetHighestPrio</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskGetHighestPrio &rArr; REMIX_CalcPrioFromPrioFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_CalcPrioFromPrioFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableSche
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSemTableSche
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableSched
</UL>

<P><STRONG><a name="[6b]"></a>REMIX_TaskReadyTableSched</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskReadyTableSched &rArr; REMIX_TaskGetHighestPrio &rArr; REMIX_CalcPrioFromPrioFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeDelete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNextNodeEmpInq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistEmpInq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskGetHighestPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSched
</UL>

<P><STRONG><a name="[71]"></a>REMIX_TaskSetPrioFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSchedTable
</UL>

<P><STRONG><a name="[70]"></a>REMIX_TaskAddToSchedTable</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSetPrioFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToFlagTable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSemTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>

<P><STRONG><a name="[72]"></a>REMIX_TaskAddToReadyTable</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSchedTable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskWake
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPrioResume
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPrioInheritance
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableSched
</UL>

<P><STRONG><a name="[74]"></a>REMIX_TaskClrPrioFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSchedTable
</UL>

<P><STRONG><a name="[73]"></a>REMIX_TaskDeleteFromSchedTable</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeDelete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistEmpInq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskClrPrioFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromReadyTable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromFlagTable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSemTable
</UL>

<P><STRONG><a name="[75]"></a>REMIX_TaskDeleteFromSemTable</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = REMIX_TaskDeleteFromSemTable &rArr; REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableSched
</UL>

<P><STRONG><a name="[76]"></a>REMIX_TaskDeleteFromFlagTable</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = REMIX_TaskDeleteFromFlagTable &rArr; REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableSched
</UL>

<P><STRONG><a name="[77]"></a>REMIX_TaskDeleteFromDelayTable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = REMIX_TaskDeleteFromDelayTable &rArr; REMIX_DlistCurNodeDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistCurNodeDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskWake
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableSched
</UL>

<P><STRONG><a name="[79]"></a>REMIX_TaskDelayTableSched</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = REMIX_TaskDelayTableSched &rArr; REMIX_TaskDeleteFromFlagTable &rArr; REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistEmpInq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromFlagTable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSemTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSched
</UL>

<P><STRONG><a name="[53]"></a>REMIX_TaskSched</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskSched &rArr; REMIX_TaskDelayTableSched &rArr; REMIX_TaskDeleteFromFlagTable &rArr; REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_CPUShareStatistic
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableSched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableSched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remix_core_a.o(REMIX_CORE)
</UL>
<P><STRONG><a name="[7b]"></a>REMIX_TaskAddToTaskList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REMIX_TaskAddToTaskList
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
</UL>

<P><STRONG><a name="[7c]"></a>REMIX_TaskDeleteFromTaskList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = REMIX_TaskDeleteFromTaskList &rArr; REMIX_DlistCurNodeDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistCurNodeDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
</UL>

<P><STRONG><a name="[7d]"></a>REMIX_TaskDeleteFromReadyTable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = REMIX_TaskDeleteFromReadyTable &rArr; REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagBlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPrioResume
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPrioInheritance
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPend
</UL>

<P><STRONG><a name="[7e]"></a>REMIX_TaskAddToDelayTable</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = REMIX_TaskAddToDelayTable &rArr; REMIX_DlistCurNodeInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNextNodeEmpInq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistEmpInq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistCurNodeInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagBlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPend
</UL>

<P><STRONG><a name="[80]"></a>REMIX_TaskSemTableInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_TaskSemTableInit &rArr; REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSchedTableInit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemCreate
</UL>

<P><STRONG><a name="[81]"></a>REMIX_TaskAddToSemTable</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = REMIX_TaskAddToSemTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSchedTable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPend
</UL>

<P><STRONG><a name="[82]"></a>REMIX_TaskSemTableSche</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskSemTableSche &rArr; REMIX_TaskGetHighestPrio &rArr; REMIX_CalcPrioFromPrioFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistEmpInq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskGetHighestPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
</UL>

<P><STRONG><a name="[83]"></a>REMIX_TaskFlagTableInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_TaskFlagTableInit &rArr; REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSchedTableInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagCreate
</UL>

<P><STRONG><a name="[84]"></a>REMIX_TaskAddToFlagTable</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = REMIX_TaskAddToFlagTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSchedTable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagBlock
</UL>

<P><STRONG><a name="[85]"></a>REMIX_TaskFlagTableSche</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, remix_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskFlagTableSche &rArr; REMIX_TaskGetHighestPrio &rArr; REMIX_CalcPrioFromPrioFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNextNodeEmpInq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistEmpInq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskGetHighestPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
</UL>

<P><STRONG><a name="[86]"></a>REMIX_TaskFlagTableCheck</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, remix_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistEmpInq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskGetHighestPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
</UL>

<P><STRONG><a name="[cb]"></a>REMIX_GetSystemTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PrintCpuUtilize
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask5
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask3
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskSwitchPrint
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskDeletePrint
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskCreatePrint
</UL>

<P><STRONG><a name="[f4]"></a>REMIX_GetCurrentTcb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_core.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>REMIX_GetRootTcb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_core.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>REMIX_GetIdleTcb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskSwitchPrint
</UL>

<P><STRONG><a name="[a5]"></a>REMIX_GetUser</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskCreate
</UL>

<P><STRONG><a name="[f6]"></a>REMIX_GetREMIXVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, remix_core.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>REMIX_MemClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, remix_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemInit
</UL>

<P><STRONG><a name="[f7]"></a>REMIX_MemCopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, remix_core.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>REMIX_TaskStackInit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_TaskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskStackCheckInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
</UL>

<P><STRONG><a name="[89]"></a>REMIX_PendSvIsrInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = REMIX_PendSvIsrInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SystemHardwareInit
</UL>

<P><STRONG><a name="[8b]"></a>REMIX_TickTimerInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = REMIX_TickTimerInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SystemHardwareInit
</UL>

<P><STRONG><a name="[64]"></a>REMIX_SystemHardwareInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_SystemHardwareInit &rArr; REMIX_TickTimerInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TickTimerInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_PendSvIsrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[f8]"></a>REMIX_SetChipWorkMode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, remix_cpu.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>REMIX_IntPendSvSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, remix_cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTick
</UL>

<P><STRONG><a name="[8c]"></a>REMIX_RunInInt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetXpsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagTake
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
</UL>

<P><STRONG><a name="[8e]"></a>REMIX_TaskSwiSched</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskSwiSched &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskOccurSwi
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_RunInInt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_IntPendSvSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagTake
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskWake
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskCreate
</UL>

<P><STRONG><a name="[6a]"></a>REMIX_CalcPrioFromPrioFlag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = REMIX_CalcPrioFromPrioFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_CalcPrioTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskGetHighestPrio
</UL>

<P><STRONG><a name="[91]"></a>REMIX_TaskLock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskLock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SetBasepri
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_RunInInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferFree
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferAlloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemFree
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemMalloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagDelete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagTake
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskWake
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemCreate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueDelete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueGetNode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueuePutNode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueCreate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTimeSlice
</UL>

<P><STRONG><a name="[93]"></a>REMIX_TaskUnlock</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskUnlock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SetBasepri
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_RunInInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferFree
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferAlloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemFree
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemMalloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagDelete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagTake
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskWake
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemTake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemCreate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueDelete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueGetNode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueuePutNode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueCreate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTimeSlice
</UL>

<P><STRONG><a name="[88]"></a>REMIX_TaskStackCheckInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, remix_debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskStackInit
</UL>

<P><STRONG><a name="[f9]"></a>REMIX_TaskStackCheck</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, remix_debug.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>REMIX_TaskCPUShareInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, remix_debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
</UL>

<P><STRONG><a name="[7a]"></a>REMIX_CPUShareStatistic</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, remix_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REMIX_CPUShareStatistic
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNextNodeEmpInq
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSched
</UL>

<P><STRONG><a name="[d0]"></a>REMIX_GetCPUShare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remix_debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PrintCpuUtilize
</UL>

<P><STRONG><a name="[5a]"></a>REMIX_DlistInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remix_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueCreate
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskListInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSchedTableInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableInit
</UL>

<P><STRONG><a name="[6f]"></a>REMIX_DlistNodeAdd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, remix_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferFree
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueuePutNode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistCurNodeInsert
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToFlagTable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSemTable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToTaskList
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSchedTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableSched
</UL>

<P><STRONG><a name="[6e]"></a>REMIX_DlistNodeDelete</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, remix_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferAlloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueGetNode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistCurNodeDelete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromFlagTable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSemTable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSchedTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableSched
</UL>

<P><STRONG><a name="[7f]"></a>REMIX_DlistCurNodeInsert</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, remix_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = REMIX_DlistCurNodeInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
</UL>

<P><STRONG><a name="[78]"></a>REMIX_DlistCurNodeDelete</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, remix_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = REMIX_DlistCurNodeDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromTaskList
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
</UL>

<P><STRONG><a name="[6c]"></a>REMIX_DlistEmpInq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableSche
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSemTableSche
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelayTableSched
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSchedTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableSched
</UL>

<P><STRONG><a name="[6d]"></a>REMIX_DlistNextNodeEmpInq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, remix_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PrintCpuUtilize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_CPUShareStatistic
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableSche
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskReadyTableSched
</UL>

<P><STRONG><a name="[94]"></a>REMIX_QueueCreate</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, remix_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = REMIX_QueueCreate &rArr; REMIX_SemCreate &rArr; REMIX_TaskSemTableInit &rArr; REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemCreate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
</UL>

<P><STRONG><a name="[98]"></a>REMIX_QueuePutNode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, remix_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
</UL>

<P><STRONG><a name="[9a]"></a>REMIX_QueueGetNode</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, remix_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = REMIX_QueueGetNode &rArr; REMIX_SemTake &rArr; REMIX_TaskPend &rArr; REMIX_TaskAddToSemTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemTake
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SerialPrintTask
</UL>

<P><STRONG><a name="[9c]"></a>REMIX_QueueDelete</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, remix_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[96]"></a>REMIX_SemCreate</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, remix_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = REMIX_SemCreate &rArr; REMIX_TaskSemTableInit &rArr; REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSemTableInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueCreate
</UL>

<P><STRONG><a name="[9b]"></a>REMIX_SemTake</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, remix_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = REMIX_SemTake &rArr; REMIX_TaskPend &rArr; REMIX_TaskAddToSemTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPrioInheritance
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_RunInInt
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueGetNode
</UL>

<P><STRONG><a name="[99]"></a>REMIX_SemGive</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, remix_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskPrioResume
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_RunInInt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSemTableSche
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSemTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueuePutNode
</UL>

<P><STRONG><a name="[9d]"></a>REMIX_SemFlushValue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, remix_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSemTableSche
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSemTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemDelete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlush
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueDelete
</UL>

<P><STRONG><a name="[a1]"></a>REMIX_SemFlush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, remix_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
</UL>

<P><STRONG><a name="[a2]"></a>REMIX_SemDelete</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, remix_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemFlushValue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[a3]"></a>REMIX_TaskTcbInit</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskTcbInit &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskCPUShareInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskStackInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToTaskList
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskCreate
</UL>

<P><STRONG><a name="[62]"></a>REMIX_TaskCreate</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskCreate &rArr; REMIX_TaskTcbInit &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetUser
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[a6]"></a>REMIX_TaskDelete</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskDelete &rArr; REMIX_TaskDeleteFromSemTable &rArr; REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromReadyTable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromTaskList
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromSemTable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSelfDelete
</UL>

<P><STRONG><a name="[47]"></a>REMIX_TaskSelfDelete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskSelfDelete &rArr; REMIX_TaskDelete &rArr; REMIX_TaskDeleteFromSemTable &rArr; REMIX_TaskDeleteFromSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remix_cpu.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>REMIX_TaskDelay</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskDelay &rArr; REMIX_TaskAddToDelayTable &rArr; REMIX_DlistCurNodeInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask5
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask3
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask1
</UL>

<P><STRONG><a name="[a8]"></a>REMIX_TaskWake</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, remix_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>

<P><STRONG><a name="[9e]"></a>REMIX_TaskPend</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = REMIX_TaskPend &rArr; REMIX_TaskAddToSemTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToSemTable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemTake
</UL>

<P><STRONG><a name="[a9]"></a>REMIX_FlagBlock</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = REMIX_FlagBlock &rArr; REMIX_TaskAddToFlagTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToFlagTable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToDelayTable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagTake
</UL>

<P><STRONG><a name="[cf]"></a>REMIX_GetTaskLinkRoot</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, remix_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PrintCpuUtilize
</UL>

<P><STRONG><a name="[9f]"></a>REMIX_TaskPrioInheritance</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = REMIX_TaskPrioInheritance &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromReadyTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemTake
</UL>

<P><STRONG><a name="[a0]"></a>REMIX_TaskPrioResume</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromReadyTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemGive
</UL>

<P><STRONG><a name="[60]"></a>REMIX_TaskTimeSlice</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, remix_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = REMIX_TaskTimeSlice &rArr; REMIX_TaskUnlock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[5f]"></a>REMIX_TaskHookInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, remix_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[b6]"></a>REMIX_TaskCreateHookAdd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
</UL>

<P><STRONG><a name="[fa]"></a>REMIX_TaskCreateHookDel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remix_task.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>REMIX_TaskSwitchHookAdd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
</UL>

<P><STRONG><a name="[fb]"></a>REMIX_TaskSwitchHookDel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remix_task.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>REMIX_TaskDeleteHookAdd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remix_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
</UL>

<P><STRONG><a name="[fc]"></a>REMIX_TaskDeleteHookDel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remix_task.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>REMIX_FlagCreate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, remix_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = REMIX_FlagCreate &rArr; REMIX_TaskFlagTableInit &rArr; REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
</UL>

<P><STRONG><a name="[ab]"></a>REMIX_FlagTake</STRONG> (Thumb, 582 bytes, Stack size 32 bytes, remix_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = REMIX_FlagTake &rArr; REMIX_FlagBlock &rArr; REMIX_TaskAddToFlagTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagBlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_RunInInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask1
</UL>

<P><STRONG><a name="[ac]"></a>REMIX_FlagGive</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, remix_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = REMIX_FlagGive &rArr; REMIX_TaskFlagTableSche &rArr; REMIX_TaskGetHighestPrio &rArr; REMIX_CalcPrioFromPrioFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableSche
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromFlagTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask3
</UL>

<P><STRONG><a name="[ad]"></a>REMIX_FlagFlushValue</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, remix_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskFlagTableCheck
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromDelayTable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteFromFlagTable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskAddToReadyTable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagDelete
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlush
</UL>

<P><STRONG><a name="[ae]"></a>REMIX_FlagFlush</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, remix_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
</UL>

<P><STRONG><a name="[af]"></a>REMIX_FlagDelete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, remix_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagFlushValue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[61]"></a>REMIX_MemInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, remix_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = REMIX_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>

<P><STRONG><a name="[b1]"></a>REMIX_MemCreate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, remix_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = REMIX_MemCreate &rArr; REMIX_TaskUnlock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>REMIX_MemMalloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, remix_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = REMIX_MemMalloc &rArr; REMIX_TaskUnlock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>REMIX_MemFree</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, remix_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = REMIX_MemFree &rArr; REMIX_TaskUnlock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask5
</UL>

<P><STRONG><a name="[b4]"></a>DEV_BufferInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DEV_BufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
</UL>

<P><STRONG><a name="[b5]"></a>DEV_SoftwareInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DEV_SoftwareInit &rArr; REMIX_QueueCreate &rArr; REMIX_SemCreate &rArr; REMIX_TaskSemTableInit &rArr; REMIX_TaskSchedTableInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDeleteHookAdd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwitchHookAdd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskCreateHookAdd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueCreate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTimeSlice
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>DEV_UartInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DEV_UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_HardwareInit
</UL>

<P><STRONG><a name="[bf]"></a>DEV_HardwareInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DEV_HardwareInit &rArr; DEV_UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>DEV_PutChar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DEV_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PrintMsg
</UL>

<P><STRONG><a name="[c3]"></a>DEV_BufferAlloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = DEV_BufferAlloc &rArr; REMIX_TaskUnlock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
</UL>

<P><STRONG><a name="[c4]"></a>DEV_PutStrToMem</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferAlloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueuePutNode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PrintCpuUtilize
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask5
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask3
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskSwitchPrint
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskDeletePrint
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskCreatePrint
</UL>

<P><STRONG><a name="[c7]"></a>DEV_PrintMsg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DEV_PrintMsg &rArr; DEV_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SerialPrintTask
</UL>

<P><STRONG><a name="[c8]"></a>DEV_BufferFree</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = DEV_BufferFree &rArr; REMIX_TaskUnlock &rArr; REMIX_RunInInt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNodeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SerialPrintTask
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_IntPendSvSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; REMIX_TaskTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>TEST_TestTask1</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TestTask1 &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagTake
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>TEST_TestTask2</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TestTask2 &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagTake
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>TEST_TaskRun</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_TaskRun
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TestTask3
</UL>

<P><STRONG><a name="[4d]"></a>TEST_TestTask3</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TestTask3 &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskRun
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>TEST_TestTask4</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TestTask4 &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskRun
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagGive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>TEST_TestTask5</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TestTask5 &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemFree
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>TEST_SerialPrintTask</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TEST_SerialPrintTask &rArr; REMIX_QueueGetNode &rArr; REMIX_SemTake &rArr; REMIX_TaskPend &rArr; REMIX_TaskAddToSemTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BufferFree
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PrintMsg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueGetNode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>TEST_TaskCreatePrint</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TaskCreatePrint &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>TEST_PrintCpuUtilize</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TEST_PrintCpuUtilize &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetTaskLinkRoot
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetCPUShare
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_DlistNextNodeEmpInq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskSwitchPrint
</UL>

<P><STRONG><a name="[49]"></a>TEST_TaskSwitchPrint</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TEST_TaskSwitchPrint &rArr; TEST_PrintCpuUtilize &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PrintCpuUtilize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetIdleTcb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>TEST_TaskDeletePrint</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TEST_TaskDeletePrint &rArr; DEV_PutStrToMem &rArr; REMIX_QueuePutNode &rArr; REMIX_SemGive &rArr; REMIX_TaskPrioResume &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; REMIXOS_Init &rArr; REMIX_TaskCreate &rArr; REMIX_TaskTcbInit &rArr; REMIX_TaskAddToReadyTable &rArr; REMIX_TaskAddToSchedTable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_HardwareInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SoftwareInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemMalloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_MemCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskCreate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_GetSystemTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d2]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[d4]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bb]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UartInit
</UL>

<P><STRONG><a name="[ff]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[d5]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[110]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[120]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UartInit
</UL>

<P><STRONG><a name="[121]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[d8]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[122]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bd]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UartInit
</UL>

<P><STRONG><a name="[bc]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UartInit
</UL>

<P><STRONG><a name="[128]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UartInit
</UL>

<P><STRONG><a name="[12a]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutChar
</UL>

<P><STRONG><a name="[131]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutChar
</UL>

<P><STRONG><a name="[13c]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[140]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[142]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[143]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[144]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[df]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[90]"></a>REMIX_CalcPrioTemp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, remix_core_a.o(REMIX_CORE))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_CalcPrioFromPrioFlag
</UL>

<P><STRONG><a name="[8]"></a>REMIX_PendSvContextSwitch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, remix_core_a.o(REMIX_CORE))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>REMIX_SwitchToTask</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, remix_core_a.o(REMIX_CORE))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIXOS_Start
</UL>

<P><STRONG><a name="[8f]"></a>REMIX_TaskOccurSwi</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, remix_core_a.o(REMIX_CORE))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskSwiSched
</UL>

<P><STRONG><a name="[8d]"></a>REMIX_GetXpsr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, remix_core_a.o(REMIX_CORE))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_RunInInt
</UL>

<P><STRONG><a name="[92]"></a>REMIX_SetBasepri</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, remix_core_a.o(REMIX_CORE))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskUnlock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskLock
</UL>

<P><STRONG><a name="[e7]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[145]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[146]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[c5]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutStrToMem
</UL>

<P><STRONG><a name="[147]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[148]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[149]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[97]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskDelete
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemDelete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueDelete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueCreate
</UL>

<P><STRONG><a name="[95]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_FlagCreate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TaskTcbInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_SemCreate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_QueueCreate
</UL>

<P><STRONG><a name="[cd]"></a>DEV_DelayMs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, unoptimize.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TaskRun
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, remix_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_TickTimerInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMIX_PendSvIsrInit
</UL>

<P><STRONG><a name="[ca]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[c9]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e9]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e8]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[ec]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[eb]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
